name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - environment: dev
            region: us-east-2
            tfvars: ./environments/dev.tfvars
          - environment: stg
            region: us-east-1
            tfvars: ./environments/stg.tfvars
          - environment: prod
            region: us-west-2
            tfvars: ./environments/prod.tfvars

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ matrix.region }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.4.5'

    - name: Terraform Init
      run: terraform init
      working-directory: ./iac

    - name: Terraform Plan
      run: terraform plan -var-file=${{ matrix.tfvars }} -out=plan-${{ matrix.environment }}.tfplan -input=false
      working-directory: ./iac

    - name: Terraform Apply
      run: terraform apply -auto-approve plan-${{ matrix.environment }}.tfplan
      working-directory: ./iac

    # - name: Pull public Docker image
    #   run: |
    #     docker pull public-image/my-app:latest
    #     docker tag public-image/my-app:latest my-registry/my-app:${{ matrix.environment }}

    # - name: Push Docker image to ECR
    #   run: |
    #     aws ecr get-login-password --region ${{ matrix.region }} | docker login --username AWS --password-stdin my-registry
    #     docker push my-registry/my-app:${{ matrix.environment }}

    - name: Deploy to AWS Fargate
      run: |
        if [ "${{ secrets.DEPLOY_STRATEGY }}" == "blue-green" ]; then
          # Blue-Green Deployment
          aws ecs update-service --cluster my-cluster --service my-service --deployment-configuration "maximumPercent=200,minimumHealthyPercent=100" --region ${{ matrix.region }}
        else
          # Rolling update
          if [ "${{ matrix.environment }}" == "prod" ]; then
            aws ecs update-service --cluster my-cluster --service my-service --force-new-deployment --region ${{ matrix.region }}
          else
            aws ecs update-service --cluster my-cluster --service my-service --region ${{ matrix.region }}
          fi
        fi
